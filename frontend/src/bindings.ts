// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

const invoke = window.__TAURI_INVOKE__;

export function setRandomSeed(seed: Uuid) {
    return invoke<null>("set_random_seed", { seed })
}

export function handleMessage(message: string) {
    return invoke<string>("handle_message", { message })
}

export function initAfterFrontendReady(platform: string) {
    return invoke<FrontendMessage[]>("init_after_frontend_ready", { platform })
}

export function errorDialog(title: string, description: string) {
    return invoke<FrontendMessage[]>("error_dialog", { title,description })
}

export function hasCrashed() {
    return invoke<boolean>("has_crashed")
}

export function inDevelopmentMode() {
    return invoke<boolean>("in_development_mode")
}

export function fileSaveSuffix() {
    return invoke<string>("file_save_suffix")
}

export function graphiteDocumentVersion() {
    return invoke<string>("graphite_document_version")
}

export function updateLayout(layoutTarget: LayoutTarget, widgetId: Uuid, value: string) {
    return invoke<FrontendMessage[]>("update_layout", { layoutTarget,widgetId,value })
}

export function loadPreferences(preferences: string) {
    return invoke<FrontendMessage[]>("load_preferences", { preferences })
}

export function selectDocument(documentId: Uuid) {
    return invoke<FrontendMessage[]>("select_document", { documentId })
}

export function newDocumentDialog() {
    return invoke<FrontendMessage[]>("new_document_dialog")
}

export function documentOpen() {
    return invoke<FrontendMessage[]>("document_open")
}

export function openDocumentFile(documentName: string, documentSerializedContent: string) {
    return invoke<FrontendMessage[]>("open_document_file", { documentName,documentSerializedContent })
}

export function openAutoSavedDocument(documentId: Uuid, documentName: string, documentIsSaved: boolean, documentSerializedContent: string) {
    return invoke<FrontendMessage[]>("open_auto_saved_document", { documentId,documentName,documentIsSaved,documentSerializedContent })
}

export function triggerAutoSave(documentId: Uuid) {
    return invoke<FrontendMessage[]>("trigger_auto_save", { documentId })
}

export function closeDocumentWithConfirmation(documentId: Uuid) {
    return invoke<FrontendMessage[]>("close_document_with_confirmation", { documentId })
}

export function requestAboutGraphiteDialogWithLocalizedCommitDate(localizedCommitDate: string) {
    return invoke<FrontendMessage[]>("request_about_graphite_dialog_with_localized_commit_date", { localizedCommitDate })
}

export function boundsOfViewports(boundsOfViewports: number[]) {
    return invoke<FrontendMessage[]>("bounds_of_viewports", { boundsOfViewports })
}

export function onMouseMove(x: number, y: number, mouseKeys: number, modifiers: number) {
    return invoke<FrontendMessage[]>("on_mouse_move", { x,y,mouseKeys,modifiers })
}

export function onWheelScroll(x: number, y: number, mouseKeys: number, wheelDeltaX: number, wheelDeltaY: number, wheelDeltaZ: number, modifiers: number) {
    return invoke<FrontendMessage[]>("on_wheel_scroll", { x,y,mouseKeys,wheelDeltaX,wheelDeltaY,wheelDeltaZ,modifiers })
}

export function onMouseDown(x: number, y: number, mouseKeys: number, modifiers: number) {
    return invoke<FrontendMessage[]>("on_mouse_down", { x,y,mouseKeys,modifiers })
}

export function onMouseUp(x: number, y: number, mouseKeys: number, modifiers: number) {
    return invoke<FrontendMessage[]>("on_mouse_up", { x,y,mouseKeys,modifiers })
}

export function onDoubleClick(x: number, y: number, mouseKeys: number, modifiers: number) {
    return invoke<FrontendMessage[]>("on_double_click", { x,y,mouseKeys,modifiers })
}

export function onKeyDown(name: string, modifiers: number) {
    return invoke<FrontendMessage[]>("on_key_down", { name,modifiers })
}

export function onKeyUp(name: string, modifiers: number) {
    return invoke<FrontendMessage[]>("on_key_up", { name,modifiers })
}

export function onChangeText(newText: string) {
    return invoke<FrontendMessage[]>("on_change_text", { newText })
}

export function onFontLoad(fontFamily: string, fontStyle: string, previewUrl: string, data: number[], isDefault: boolean) {
    return invoke<FrontendMessage[]>("on_font_load", { fontFamily,fontStyle,previewUrl,data,isDefault })
}

export function updateBounds(newText: string) {
    return invoke<FrontendMessage[]>("update_bounds", { newText })
}

export function eyedropperSampleForColorPicker() {
    return invoke<FrontendMessage[]>("eyedropper_sample_for_color_picker")
}

export function updatePrimaryColor(red: number, green: number, blue: number, alpha: number) {
    return invoke<FrontendMessage[]>("update_primary_color", { red,green,blue,alpha })
}

export function updateSecondaryColor(red: number, green: number, blue: number, alpha: number) {
    return invoke<FrontendMessage[]>("update_secondary_color", { red,green,blue,alpha })
}

export function pasteSerializedData(data: string) {
    return invoke<FrontendMessage[]>("paste_serialized_data", { data })
}

export function selectLayer(layerPath: Uuid[], ctrl: boolean, shift: boolean) {
    return invoke<FrontendMessage[]>("select_layer", { layerPath,ctrl,shift })
}

export function deselectAllLayers() {
    return invoke<FrontendMessage[]>("deselect_all_layers")
}

export function moveLayerInTree(folderPath: Uuid[], insertIndex: number) {
    return invoke<FrontendMessage[]>("move_layer_in_tree", { folderPath,insertIndex })
}

export function setLayerName(layerPath: Uuid[], name: string) {
    return invoke<FrontendMessage[]>("set_layer_name", { layerPath,name })
}

export function translateCanvas(deltaX: number, deltaY: number) {
    return invoke<FrontendMessage[]>("translate_canvas", { deltaX,deltaY })
}

export function translateCanvasByFraction(deltaX: number, deltaY: number) {
    return invoke<FrontendMessage[]>("translate_canvas_by_fraction", { deltaX,deltaY })
}

export function setImageBlobUrl(documentId: Uuid, layerPath: Uuid[], blobUrl: string, width: number, height: number) {
    return invoke<FrontendMessage[]>("set_image_blob_url", { documentId,layerPath,blobUrl,width,height })
}

export function setImaginateImageData(documentId: Uuid, layerPath: Uuid[], nodePath: Uuid[], imageData: number[], width: number, height: number) {
    return invoke<FrontendMessage[]>("set_imaginate_image_data", { documentId,layerPath,nodePath,imageData,width,height })
}

export function setImaginateGeneratingStatus(documentId: Uuid, layerPath: Uuid[], nodePath: Uuid[], percent: number | null, status: string) {
    return invoke<FrontendMessage[]>("set_imaginate_generating_status", { documentId,layerPath,nodePath,percent,status })
}

export function setImaginateServerStatus(available: boolean) {
    return invoke<FrontendMessage[]>("set_imaginate_server_status", { available })
}

export function processNodeGraphFrame(documentId: Uuid, layerPath: Uuid[], imageData: number[], width: number, height: number, imaginateNode: Uuid[] | null) {
    return invoke<FrontendMessage[]>("process_node_graph_frame", { documentId,layerPath,imageData,width,height,imaginateNode })
}

export function connectNodesByLink(outputNode: Uuid, outputNodeConnectorIndex: Uuid, inputNode: Uuid, inputNodeConnectorIndex: Uuid) {
    return invoke<FrontendMessage[]>("connect_nodes_by_link", { outputNode,outputNodeConnectorIndex,inputNode,inputNodeConnectorIndex })
}

export function shiftNode(nodeId: Uuid) {
    return invoke<FrontendMessage[]>("shift_node", { nodeId })
}

export function disconnectNodes(nodeId: Uuid, inputIndex: Uuid) {
    return invoke<FrontendMessage[]>("disconnect_nodes", { nodeId,inputIndex })
}

export function rectangleIntersects(bezierX: number[], bezierY: number[], top: number, left: number, bottom: number, right: number) {
    return invoke<boolean>("rectangle_intersects", { bezierX,bezierY,top,left,bottom,right })
}

export function createNode(nodeType: string, x: number, y: number) {
    return invoke<FrontendMessage[]>("create_node", { nodeType,x,y })
}

export function selectNodes(nodes: Uuid[]) {
    return invoke<FrontendMessage[]>("select_nodes", { nodes })
}

export function pasteSerializedNodes(serializedNodes: string) {
    return invoke<FrontendMessage[]>("paste_serialized_nodes", { serializedNodes })
}

export function doubleClickNode(node: Uuid) {
    return invoke<FrontendMessage[]>("double_click_node", { node })
}

export function moveSelectedNodes(displacementX: number, displacementY: number) {
    return invoke<FrontendMessage[]>("move_selected_nodes", { displacementX,displacementY })
}

export function togglePreview(nodeId: Uuid) {
    return invoke<FrontendMessage[]>("toggle_preview", { nodeId })
}

export function pasteImage(imageData: number[], width: number, height: number, mouseX: number | null, mouseY: number | null) {
    return invoke<FrontendMessage[]>("paste_image", { imageData,width,height,mouseX,mouseY })
}

export function toggleLayerVisibility(layerPath: Uuid[]) {
    return invoke<FrontendMessage[]>("toggle_layer_visibility", { layerPath })
}

export function toggleLayerExpansion(layerPath: Uuid[]) {
    return invoke<FrontendMessage[]>("toggle_layer_expansion", { layerPath })
}

export type FrontendMessage = { DisplayDialog: { icon: string } } | "DisplayDialogDismiss" | { DisplayDialogPanic: { panicInfo: string; header: string; description: string } } | { DisplayEditableTextbox: { text: string; lineWidth: number | null; fontSize: number; color: Color } } | "DisplayRemoveEditableTextbox" | { TriggerAboutGraphiteLocalizedCommitDate: { commitDate: string } } | { TriggerFileDownload: { document: string; name: string } } | { TriggerFontLoad: { font: Font; isDefault: boolean } } | { TriggerImaginateCheckServerStatus: { hostname: string } } | { TriggerImaginateGenerate: { parameters: ImaginateGenerationParameters; baseImage: ImaginateBaseImage | null; maskImage: ImaginateMaskImage | null; maskPaintMode: ImaginateMaskPaintMode; maskBlurPx: number; maskFillContent: ImaginateMaskStartingFill; hostname: string; refreshFrequency: number; documentId: Uuid; layerPath: Uuid[]; nodePath: Uuid[] } } | { TriggerImaginateTerminate: { documentId: Uuid; layerPath: Uuid[]; nodePath: Uuid[]; hostname: string } } | "TriggerImport" | { TriggerIndexedDbRemoveDocument: { documentId: Uuid } } | { TriggerIndexedDbWriteDocument: { document: string; details: FrontendDocumentDetails; version: string } } | "TriggerLoadAutoSaveDocuments" | "TriggerLoadPreferences" | { TriggerNodeGraphFrameGenerate: { documentId: Uuid; layerPath: Uuid[]; svg: string; size: DVec2; imaginateNode: Uuid[] | null } } | "TriggerOpenDocument" | "TriggerPaste" | { TriggerRasterDownload: { svg: string; name: string; mime: string; size: [number, number] } } | "TriggerRefreshBoundsOfViewports" | { TriggerRevokeBlobUrl: { url: string } } | { TriggerSavePreferences: { preferences: PreferencesMessageHandler } } | "TriggerTextCommit" | { TriggerTextCopy: { copyText: string } } | "TriggerViewportResize" | { TriggerVisitLink: { url: string } } | { UpdateActiveDocument: { documentId: Uuid } } | { UpdateDialogDetails: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDocumentArtboards: { svg: string } } | { UpdateDocumentArtwork: { svg: string } } | { UpdateDocumentBarLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDocumentLayerDetails: { data: LayerPanelEntry } } | { UpdateDocumentLayerTreeStructure: { dataBuffer: RawBuffer } } | { UpdateDocumentLayerTreeStructureJs: { dataBuffer: JsRawBuffer } } | { UpdateDocumentModeLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateDocumentOverlays: { svg: string } } | { UpdateDocumentRulers: { origin: [number, number]; spacing: number; interval: number } } | { UpdateDocumentScrollbars: { position: [number, number]; size: [number, number]; multiplier: [number, number] } } | { UpdateEyedropperSamplingState: { mousePosition: [number, number] | null; primaryColor: string; secondaryColor: string; setColorChoice: string | null } } | { UpdateImageData: { documentId: Uuid; imageData: FrontendImageData[] } } | { UpdateInputHints: { hintData: HintData } } | { UpdateLayerTreeOptionsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateMenuBarLayout: { layoutTarget: LayoutTarget; layout: MenuBarEntry[] } } | { UpdateMouseCursor: { cursor: MouseCursorIcon } } | { UpdateNodeGraph: { nodes: FrontendNode[]; links: FrontendNodeLink[] } } | { UpdateNodeGraphBarLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateNodeGraphSelection: { selected: Uuid[] } } | { UpdateNodeGraphVisibility: { visible: boolean } } | { UpdateNodeTypes: { nodeTypes: FrontendNodeType[] } } | { UpdateOpenDocumentsList: { openDocuments: FrontendDocumentDetails[] } } | { UpdatePropertyPanelOptionsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdatePropertyPanelSectionsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateToolOptionsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateToolShelfLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } } | { UpdateWorkingColorsLayout: { layoutTarget: LayoutTarget; diff: WidgetDiff[] } }
export type Uuid = string
export type CheckboxInput = { checked: boolean; disabled: boolean; icon: string; tooltip: string }
export type NodeGraphOutput = { dataType: FrontendGraphDataType; name: string }
export type RadioEntryData = { value: string; label: string; icon: string; tooltip: string }
export type MenuBarEntryChildren = MenuBarEntry[][]
export type LayerPanelEntry = { name: string; tooltip: string; visible: boolean; layerType: LayerDataTypeDiscriminant; layerMetadata: LayerMetadata; path: Uuid[]; thumbnail: string }
export type ImaginateMaskImage = { svg: string; size: DVec2 }
export type MouseCursorIcon = "Default" | "None" | "ZoomIn" | "ZoomOut" | "Grabbing" | "Crosshair" | "Text" | "Move" | "NSResize" | "EWResize" | "NESWResize" | "NWSEResize" | "Rotate"
export type PreferencesMessageHandler = { imaginate_server_hostname: string; imaginate_refresh_frequency: number }
export type ActionKeys = { Action: number } | { keys: LayoutKeysGroup }
export type PivotPosition = "None" | "TopLeft" | "TopCenter" | "TopRight" | "CenterLeft" | "Center" | "CenterRight" | "BottomLeft" | "BottomCenter" | "BottomRight"
export type HintData = HintGroup[]
export type BreadcrumbTrailButtons = { labels: string[]; disabled: boolean; tooltip: string }
export type DVec2 = { x: number; y: number }
export type FrontendNode = { id: Uuid; displayName: string; primaryInput: FrontendGraphDataType | null; exposedInputs: NodeGraphInput[]; outputs: NodeGraphOutput[]; position: [number, number]; disabled: boolean; previewed: boolean }
export type JsRawBuffer = number[]
export type NumberInputIncrementBehavior = "Add" | "Multiply" | "Callback"
export type LayerDataTypeDiscriminant = "Folder" | "Shape" | "Text" | "Image" | "NodeGraphFrame"
export type OptionalInput = { checked: boolean; disabled: boolean; icon: string; tooltip: string }
export type HintGroup = HintInfo[]
export type MouseMotion = "None" | "Lmb" | "Rmb" | "Mmb" | "ScrollUp" | "ScrollDown" | "Drag" | "LmbDrag" | "RmbDrag" | "MmbDrag"
export type TextAreaInput = { value: string; label: string | null; disabled: boolean; tooltip: string }
export type ColorInput = { value: Color | null; noTransparency: boolean; disabled: boolean; tooltip: string }
export type LayoutTarget = "DialogDetails" | "DocumentBar" | "DocumentMode" | "LayerTreeOptions" | "MenuBar" | "NodeGraphBar" | "PropertiesOptions" | "PropertiesSections" | "ToolOptions" | "ToolShelf" | "WorkingColors" | "LayoutTargetLength"
export type IconButton = { icon: string; size: number; disabled: boolean; active: boolean; tooltip: string }
export type DropdownEntryData = { value: string; label: string; icon: string; shortcut: string[]; shortcutRequiresLock: boolean; disabled: boolean; children: DropdownEntryData[][] }
export type FontInput = { fontFamily: string; fontStyle: string; isStyle: boolean; disabled: boolean; tooltip: string }
export type TextInput = { value: string; label: string | null; disabled: boolean; tooltip: string; centered: boolean; minWidth: number }
export type ImaginateMaskPaintMode = "Inpaint" | "Outpaint"
export type RawBuffer = number[]
export type LayerReferenceInput = { value: Uuid[] | null; layerName: string | null; layerType: LayerDataTypeDiscriminant | null; disabled: boolean; tooltip: string; minWidth: number }
export type LayoutGroup = { column: { columnWidgets: WidgetHolder[] } } | { row: { rowWidgets: WidgetHolder[] } } | { section: { name: string; layout: LayoutGroup[] } }
export type HintInfo = { keyGroups: LayoutKeysGroup[]; keyGroupsMac: LayoutKeysGroup[] | null; mouse: MouseMotion | null; label: string; plus: boolean }
export type RadioInput = { entries: RadioEntryData[]; disabled: boolean; selectedIndex: number }
export type FrontendDocumentDetails = { isAutoSaved: boolean; isSaved: boolean; name: string; id: Uuid }
/**
 *  A single change to part of the UI, containing the location of the change and the new value.
 */
export type WidgetDiff = { widgetPath: Uuid[]; newValue: DiffUpdate }
export type LayoutKey = { key: string; label: string }
/**
 *  The new value of the UI, sent as part of a diff.
 * 
 *  An update can represent a single widget or an entire SubLayout, or just a single layout group.
 */
export type DiffUpdate = { subLayout: LayoutGroup[] } | { layoutGroup: LayoutGroup } | { widget: WidgetHolder }
export type NumberInput = { label: string; tooltip: string; disabled: boolean; value: number | null; min: number | null; max: number | null; isInteger: boolean; displayDecimalPlaces: number; unit: string; unitIsHiddenWhenEditing: boolean; mode: NumberInputMode; incrementBehavior: NumberInputIncrementBehavior; step: number; rangeMin: number | null; rangeMax: number | null; minWidth: number }
export type TextLabel = { disabled: boolean; bold: boolean; italic: boolean; tableAlign: boolean; multiline: boolean; minWidth: number; tooltip: string; value: string }
export type SeparatorType = "Related" | "Unrelated" | "Section" | "List"
export type ImaginateMaskStartingFill = "Fill" | "Original" | "LatentNoise" | "LatentNothing"
export type Widget = { BreadcrumbTrailButtons: BreadcrumbTrailButtons } | { CheckboxInput: CheckboxInput } | { ColorInput: ColorInput } | { DropdownInput: DropdownInput } | { FontInput: FontInput } | { IconButton: IconButton } | { IconLabel: IconLabel } | { InvisibleStandinInput: InvisibleStandinInput } | { LayerReferenceInput: LayerReferenceInput } | { NumberInput: NumberInput } | { OptionalInput: OptionalInput } | { ParameterExposeButton: ParameterExposeButton } | { PivotAssist: PivotAssist } | { PopoverButton: PopoverButton } | { RadioInput: RadioInput } | { Separator: Separator } | { SwatchPairInput: SwatchPairInput } | { TextAreaInput: TextAreaInput } | { TextButton: TextButton } | { TextInput: TextInput } | { TextLabel: TextLabel }
export type SwatchPairInput = { primary: Color; secondary: Color }
/**
 *  A font type (storing font family and font style and an optional preview URL)
 */
export type Font = { fontFamily: string; fontStyle: string }
export type MenuBarEntry = { label: string; icon: string | null; shortcut: ActionKeys | null; action: WidgetHolder; children: MenuBarEntryChildren }
export type TextButton = { label: string; icon: string | null; emphasized: boolean; minWidth: number; disabled: boolean; tooltip: string }
export type PopoverButton = { icon: string | null; disabled: boolean; header: string; text: string; tooltip: string }
export type FrontendNodeType = { name: string; category: string }
/**
 *  This widget allows for the flexible use of the layout system.
 *  In a custom layout, one can define a widget that is just used to trigger code on the backend.
 *  This is used in MenuLayout to pipe the triggering of messages from the frontend to backend.
 */
export type InvisibleStandinInput = null
export type LayoutKeysGroup = LayoutKey[]
export type IconLabel = { icon: string; disabled: boolean; tooltip: string }
export type FrontendImageData = { path: Uuid[]; mime: string }
export type FrontendNodeLink = { linkStart: Uuid; linkStartOutputIndex: Uuid; linkEnd: Uuid; linkEndInputIndex: Uuid }
export type NumberInputMode = "Increment" | "Range"
export type SeparatorDirection = "Horizontal" | "Vertical"
export type DropdownInput = { entries: DropdownEntryData[][]; selectedIndex: number | null; drawIcon: boolean; interactive: boolean; disabled: boolean; tooltip: string }
export type NodeGraphInput = { dataType: FrontendGraphDataType; name: string }
export type ImaginateBaseImage = { mime: string; imageData: number[]; size: DVec2 }
export type ParameterExposeButton = { exposed: boolean; dataType: FrontendGraphDataType; tooltip: string }
export type WidgetHolder = { widgetId: Uuid; widget: Widget }
export type PivotAssist = { position: PivotPosition; disabled: boolean }
/**
 *  Structure that represents a color.
 *  Internally alpha is stored as `f32` that ranges from `0.0` (transparent) to `1.0` (opaque).
 *  The other components (RGB) are stored as `f32` that range from `0.0` up to `f32::MAX`,
 *  the values encode the brightness of each channel proportional to the light intensity in cd/m² (nits) in HDR, and `0.0` (black) to `1.0` (white) in SDR color.
 */
export type Color = { red: number; green: number; blue: number; alpha: number }
export type LayerMetadata = { selected: boolean; expanded: boolean }